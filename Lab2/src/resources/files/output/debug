################
INPUT: [program]
WORK: []
STATE: q
INDEX: 0
################
INPUT: [declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList])]
STATE: q
INDEX: 0
################
INPUT: [declaration, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration])]
STATE: q
INDEX: 0
################
INPUT: [var, type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id])]
STATE: q
INDEX: 0
################
INPUT: [type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: q
INDEX: 1
################
INPUT: [simpleType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: q
INDEX: 1
################
INPUT: [boolean, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 1
################
INPUT: [boolean, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 1
################
INPUT: [string, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: q
INDEX: 1
################
INPUT: [string, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: b
INDEX: 1
################
INPUT: [integer, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 1
################
INPUT: [id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 2
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: q
INDEX: 3
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement])]
STATE: q
INDEX: 3
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 3
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 3
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 3
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 3
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 3
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 3
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 3
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 3
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 3
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 3
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: q
INDEX: 3
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 3
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 3
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: b
INDEX: 3
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 3
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 3
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 3
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 3
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement])]
STATE: b
INDEX: 3
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList])]
STATE: q
INDEX: 3
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 3
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 3
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 3
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 3
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 3
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 3
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 3
################
INPUT: [write, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 3
################
INPUT: [write, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 3
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 3
################
INPUT: [attribution, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution])]
STATE: q
INDEX: 3
################
INPUT: [id, <-, expression, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 3
################
INPUT: [id, <-, expression, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 3
################
INPUT: [attribution, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution])]
STATE: b
INDEX: 3
################
INPUT: [whileStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 3
################
INPUT: [while, [, condition, ], statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 3
################
INPUT: [while, [, condition, ], statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 3
################
INPUT: [whileStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 3
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList])]
STATE: b
INDEX: 3
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: b
INDEX: 3
################
INPUT: [id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: b
INDEX: 2
################
INPUT: [integer, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: b
INDEX: 1
################
INPUT: [character, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [character])]
STATE: q
INDEX: 1
################
INPUT: [character, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [character])]
STATE: b
INDEX: 1
################
INPUT: [simpleType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: b
INDEX: 1
################
INPUT: [arrayType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType])]
STATE: q
INDEX: 1
################
INPUT: [simpleType, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]])]
STATE: q
INDEX: 1
################
INPUT: [boolean, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 1
################
INPUT: [boolean, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 1
################
INPUT: [string, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [string])]
STATE: q
INDEX: 1
################
INPUT: [string, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [string])]
STATE: b
INDEX: 1
################
INPUT: [integer, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 1
################
INPUT: [array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 2
################
INPUT: [array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: b
INDEX: 2
################
INPUT: [integer, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer])]
STATE: b
INDEX: 1
################
INPUT: [character, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [character])]
STATE: q
INDEX: 1
################
INPUT: [character, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [character])]
STATE: b
INDEX: 1
################
INPUT: [simpleType, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]])]
STATE: b
INDEX: 1
################
INPUT: [arrayType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType])]
STATE: b
INDEX: 1
################
INPUT: [type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: b
INDEX: 1
################
INPUT: [var, type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id])]
STATE: b
INDEX: 0
################
INPUT: [declaration, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration])]
STATE: b
INDEX: 0
################
INPUT: [declaration, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList])]
STATE: q
INDEX: 0
################
INPUT: [var, type, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id])]
STATE: q
INDEX: 0
################
INPUT: [type, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: q
INDEX: 1
################
INPUT: [simpleType, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: q
INDEX: 1
################
INPUT: [boolean, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 1
################
INPUT: [boolean, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 1
################
INPUT: [string, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: q
INDEX: 1
################
INPUT: [string, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: b
INDEX: 1
################
INPUT: [integer, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 1
################
INPUT: [id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 2
################
INPUT: [declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: q
INDEX: 3
################
INPUT: [declaration, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration])]
STATE: q
INDEX: 3
################
INPUT: [var, type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id])]
STATE: q
INDEX: 3
################
INPUT: [type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: q
INDEX: 4
################
INPUT: [simpleType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: q
INDEX: 4
################
INPUT: [boolean, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 4
################
INPUT: [boolean, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 4
################
INPUT: [string, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: q
INDEX: 4
################
INPUT: [string, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: b
INDEX: 4
################
INPUT: [integer, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 4
################
INPUT: [id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 5
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: q
INDEX: 6
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement])]
STATE: q
INDEX: 6
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 6
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 6
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 6
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 6
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 6
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 6
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 6
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 6
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 6
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 6
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: q
INDEX: 6
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 6
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 6
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: b
INDEX: 6
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 6
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 6
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 6
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 6
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement])]
STATE: b
INDEX: 6
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList])]
STATE: q
INDEX: 6
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 6
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 6
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 6
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 6
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 6
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 6
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 6
################
INPUT: [write, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 6
################
INPUT: [write, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 6
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 6
################
INPUT: [attribution, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution])]
STATE: q
INDEX: 6
################
INPUT: [id, <-, expression, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 6
################
INPUT: [id, <-, expression, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 6
################
INPUT: [attribution, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [attribution])]
STATE: b
INDEX: 6
################
INPUT: [whileStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 6
################
INPUT: [while, [, condition, ], statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 6
################
INPUT: [while, [, condition, ], statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 6
################
INPUT: [whileStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 6
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList])]
STATE: b
INDEX: 6
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: b
INDEX: 6
################
INPUT: [id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: b
INDEX: 5
################
INPUT: [integer, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: b
INDEX: 4
################
INPUT: [character, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [character])]
STATE: q
INDEX: 4
################
INPUT: [character, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [character])]
STATE: b
INDEX: 4
################
INPUT: [simpleType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: b
INDEX: 4
################
INPUT: [arrayType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType])]
STATE: q
INDEX: 4
################
INPUT: [simpleType, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]])]
STATE: q
INDEX: 4
################
INPUT: [boolean, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 4
################
INPUT: [boolean, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 4
################
INPUT: [string, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [string])]
STATE: q
INDEX: 4
################
INPUT: [string, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [string])]
STATE: b
INDEX: 4
################
INPUT: [integer, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 4
################
INPUT: [array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 5
################
INPUT: [array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: b
INDEX: 5
################
INPUT: [integer, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [integer])]
STATE: b
INDEX: 4
################
INPUT: [character, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [character])]
STATE: q
INDEX: 4
################
INPUT: [character, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]]), (key: simpleType, value: [character])]
STATE: b
INDEX: 4
################
INPUT: [simpleType, array, [, number, ], id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType]), (key: arrayType, value: [simpleType, array, [, number, ]])]
STATE: b
INDEX: 4
################
INPUT: [arrayType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [arrayType])]
STATE: b
INDEX: 4
################
INPUT: [type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: b
INDEX: 4
################
INPUT: [var, type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id])]
STATE: b
INDEX: 3
################
INPUT: [declaration, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration])]
STATE: b
INDEX: 3
################
INPUT: [declaration, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList])]
STATE: q
INDEX: 3
################
INPUT: [var, type, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id])]
STATE: q
INDEX: 3
################
INPUT: [type, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: q
INDEX: 4
################
INPUT: [simpleType, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: q
INDEX: 4
################
INPUT: [boolean, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 4
################
INPUT: [boolean, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 4
################
INPUT: [string, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: q
INDEX: 4
################
INPUT: [string, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: b
INDEX: 4
################
INPUT: [integer, id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 4
################
INPUT: [id, declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 5
################
INPUT: [declarationList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: q
INDEX: 6
################
INPUT: [declaration, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration])]
STATE: q
INDEX: 6
################
INPUT: [var, type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id])]
STATE: q
INDEX: 6
################
INPUT: [type, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var])]
STATE: q
INDEX: 7
################
INPUT: [simpleType, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType])]
STATE: q
INDEX: 7
################
INPUT: [boolean, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: q
INDEX: 7
################
INPUT: [boolean, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [boolean])]
STATE: b
INDEX: 7
################
INPUT: [string, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: q
INDEX: 7
################
INPUT: [string, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [string])]
STATE: b
INDEX: 7
################
INPUT: [integer, id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer])]
STATE: q
INDEX: 7
################
INPUT: [id, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer])]
STATE: q
INDEX: 8
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id])]
STATE: q
INDEX: 9
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement])]
STATE: q
INDEX: 9
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 9
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 9
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 9
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 9
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 9
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 9
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: q
INDEX: 10
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: q
INDEX: 11
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 12
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 13
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: b
INDEX: 13
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: b
INDEX: 12
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: b
INDEX: 11
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: b
INDEX: 10
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 9
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 9
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 9
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 9
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: q
INDEX: 9
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 9
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 9
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: b
INDEX: 9
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 9
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 9
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 9
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 9
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement])]
STATE: b
INDEX: 9
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList])]
STATE: q
INDEX: 9
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 9
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 9
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 9
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 9
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 9
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 9
################
INPUT: [[, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: q
INDEX: 10
################
INPUT: [id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: q
INDEX: 11
################
INPUT: [], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 12
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 13
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: q
INDEX: 13
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 13
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 13
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 13
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 13
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 13
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 13
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: q
INDEX: 14
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: q
INDEX: 15
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 16
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 17
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: b
INDEX: 17
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: b
INDEX: 16
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: b
INDEX: 15
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: b
INDEX: 14
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 13
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 13
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 13
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 13
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: q
INDEX: 13
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 13
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 13
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: b
INDEX: 13
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 13
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 13
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 13
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 13
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: b
INDEX: 13
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList])]
STATE: q
INDEX: 13
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 13
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 13
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 13
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 13
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 13
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 13
################
INPUT: [[, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: q
INDEX: 14
################
INPUT: [id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: q
INDEX: 15
################
INPUT: [], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 16
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 17
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: q
INDEX: 17
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 17
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 17
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 17
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 17
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 17
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 17
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: q
INDEX: 18
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: q
INDEX: 19
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 20
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 21
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: b
INDEX: 21
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: b
INDEX: 20
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: b
INDEX: 19
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: b
INDEX: 18
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 17
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 17
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: b
INDEX: 17
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: b
INDEX: 17
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: q
INDEX: 17
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: q
INDEX: 17
################
INPUT: [id, <-, expression]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution]), (key: attribution, value: [id, <-, expression])]
STATE: b
INDEX: 17
################
INPUT: [attribution]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [attribution])]
STATE: b
INDEX: 17
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: q
INDEX: 17
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: q
INDEX: 17
################
INPUT: [while, [, condition, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement]), (key: whileStatement, value: [while, [, condition, ], statementList])]
STATE: b
INDEX: 17
################
INPUT: [whileStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [whileStatement])]
STATE: b
INDEX: 17
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: b
INDEX: 17
################
INPUT: [statement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList])]
STATE: q
INDEX: 17
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 17
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 17
################
INPUT: [if, [, condition, ], statementList, else, statementList, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 17
################
INPUT: [ifStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 17
################
INPUT: [ioStatement, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 17
################
INPUT: [read, [, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 17
################
INPUT: [[, id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read])]
STATE: q
INDEX: 18
################
INPUT: [id, ], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[])]
STATE: q
INDEX: 19
################
INPUT: [], statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 20
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 21
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: q
INDEX: 21
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 21
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 21
################
INPUT: [[, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if])]
STATE: q
INDEX: 22
################
INPUT: [condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[])]
STATE: q
INDEX: 23
################
INPUT: [expression, relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression])]
STATE: q
INDEX: 23
################
INPUT: [term, relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term])]
STATE: q
INDEX: 23
################
INPUT: [id, relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id])]
STATE: q
INDEX: 23
################
INPUT: [relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id])]
STATE: q
INDEX: 24
################
INPUT: [or, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [or])]
STATE: q
INDEX: 24
################
INPUT: [or, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [or])]
STATE: b
INDEX: 24
################
INPUT: [==, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [==])]
STATE: q
INDEX: 24
################
INPUT: [==, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [==])]
STATE: b
INDEX: 24
################
INPUT: [>=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>=])]
STATE: q
INDEX: 24
################
INPUT: [>=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>=])]
STATE: b
INDEX: 24
################
INPUT: [<=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<=])]
STATE: q
INDEX: 24
################
INPUT: [<=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<=])]
STATE: b
INDEX: 24
################
INPUT: [<<, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<<])]
STATE: q
INDEX: 24
################
INPUT: [<<, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<<])]
STATE: b
INDEX: 24
################
INPUT: [>>, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>])]
STATE: q
INDEX: 24
################
INPUT: [expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>])]
STATE: q
INDEX: 25
################
INPUT: [term, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term])]
STATE: q
INDEX: 25
################
INPUT: [id, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id])]
STATE: q
INDEX: 25
################
INPUT: [], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id])]
STATE: q
INDEX: 26
################
INPUT: [statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 27
################
INPUT: [statement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: q
INDEX: 27
################
INPUT: [ifStatement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 27
################
INPUT: [if, [, condition, ], statementList, else, statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 27
################
INPUT: [if, [, condition, ], statementList, else, statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 27
################
INPUT: [ifStatement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 27
################
INPUT: [ioStatement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 27
################
INPUT: [read, [, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 27
################
INPUT: [read, [, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 27
################
INPUT: [write, [, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 27
################
INPUT: [[, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write])]
STATE: q
INDEX: 28
################
INPUT: [id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[])]
STATE: q
INDEX: 29
################
INPUT: [], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 30
################
INPUT: [else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 31
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else])]
STATE: q
INDEX: 32
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement])]
STATE: q
INDEX: 32
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 32
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 32
################
INPUT: [[, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if])]
STATE: q
INDEX: 33
################
INPUT: [condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[])]
STATE: q
INDEX: 34
################
INPUT: [expression, relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression])]
STATE: q
INDEX: 34
################
INPUT: [term, relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term])]
STATE: q
INDEX: 34
################
INPUT: [id, relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id])]
STATE: q
INDEX: 34
################
INPUT: [relation, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id])]
STATE: q
INDEX: 35
################
INPUT: [or, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [or])]
STATE: q
INDEX: 35
################
INPUT: [or, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [or])]
STATE: b
INDEX: 35
################
INPUT: [==, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [==])]
STATE: q
INDEX: 35
################
INPUT: [==, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [==])]
STATE: b
INDEX: 35
################
INPUT: [>=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>=])]
STATE: q
INDEX: 35
################
INPUT: [>=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>=])]
STATE: b
INDEX: 35
################
INPUT: [<=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<=])]
STATE: q
INDEX: 35
################
INPUT: [<=, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<=])]
STATE: b
INDEX: 35
################
INPUT: [<<, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<<])]
STATE: q
INDEX: 35
################
INPUT: [<<, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [<<])]
STATE: b
INDEX: 35
################
INPUT: [>>, expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>])]
STATE: q
INDEX: 35
################
INPUT: [expression, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>])]
STATE: q
INDEX: 36
################
INPUT: [term, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term])]
STATE: q
INDEX: 36
################
INPUT: [id, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id])]
STATE: q
INDEX: 36
################
INPUT: [], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id])]
STATE: q
INDEX: 37
################
INPUT: [statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 38
################
INPUT: [statement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement])]
STATE: q
INDEX: 38
################
INPUT: [ifStatement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 38
################
INPUT: [if, [, condition, ], statementList, else, statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 38
################
INPUT: [if, [, condition, ], statementList, else, statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 38
################
INPUT: [ifStatement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 38
################
INPUT: [ioStatement, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 38
################
INPUT: [read, [, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 38
################
INPUT: [read, [, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 38
################
INPUT: [write, [, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 38
################
INPUT: [[, id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write])]
STATE: q
INDEX: 39
################
INPUT: [id, ], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[])]
STATE: q
INDEX: 40
################
INPUT: [], else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 41
################
INPUT: [else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 42
################
INPUT: [statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else])]
STATE: q
INDEX: 43
################
INPUT: [statement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement])]
STATE: q
INDEX: 43
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: q
INDEX: 43
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: q
INDEX: 43
################
INPUT: [if, [, condition, ], statementList, else, statementList]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList])]
STATE: b
INDEX: 43
################
INPUT: [ifStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement])]
STATE: b
INDEX: 43
################
INPUT: [ioStatement]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement])]
STATE: q
INDEX: 43
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: q
INDEX: 43
################
INPUT: [read, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]])]
STATE: b
INDEX: 43
################
INPUT: [write, [, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]])]
STATE: q
INDEX: 43
################
INPUT: [[, id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write])]
STATE: q
INDEX: 44
################
INPUT: [id, ]]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[])]
STATE: q
INDEX: 45
################
INPUT: []]
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id])]
STATE: q
INDEX: 46
################
INPUT: []
WORK: [(key: program, value: [declarationList, statementList]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration, declarationList]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: declarationList, value: [declaration]), (key: declaration, value: [var, type, id]), (key: var, value: [var]), (key: type, value: [simpleType]), (key: simpleType, value: [integer]), (key: integer, value: [integer]), (key: id, value: [id]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement, statementList]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [read, [, id, ]]), (key: read, value: [read]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ifStatement]), (key: ifStatement, value: [if, [, condition, ], statementList, else, statementList]), (key: if, value: [if]), (key: [, value: [[]), (key: condition, value: [expression, relation, expression]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: relation, value: [>>]), (key: >>, value: [>>]), (key: expression, value: [term]), (key: term, value: [id]), (key: id, value: [id]), (key: ], value: []]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []]), (key: else, value: [else]), (key: statementList, value: [statement]), (key: statement, value: [ioStatement]), (key: ioStatement, value: [write, [, id, ]]), (key: write, value: [write]), (key: [, value: [[]), (key: id, value: [id]), (key: ], value: []])]
STATE: q
INDEX: 47
